#!/usr/bin/env node


var iai = require('..');
//var iwconfig = iai.require('hw/iwconfig');


var exports = module.exports = iai.Operation( __filename );

exports
  .argv('--card, -i, card=[#]', 'wireless interface to use')
  .argv('--orig, -o, orig=[#]', 'origin MAC address')
  .argv('--essid, -e, essid=[#]', 'target AP name')
  .argv('--bssid, -b, bssid=[#]', 'target AP MAC address')
  .argv('--channel, -c, channel=[#]', 'target AP channel')
  .argv('--no-colors', 'disables ANSI VT100 colored output')
  .argv('<operation>', 'operation to do (scan/etc)')
;

exports
  // TODO define a way to reach validateCard programaticaly (operation)
  //.runs( 'validate wireless card to use', validateCard )
  //.and( 'check the card is on monitor mode', monitorMode )
  .runs( main )
  // TODO
  // next call should be on a file with a sheebang and a require(...).run()
  .run( process.argv )
;

function main(){
};


// validates a wireless interface identifier
function validateCard( env ){
  // TODO card could be IP:PORT (airserve-ng)
  env.exec('iwconfig', function( err, stdout, stderr ){
    var cards = stdout.split('\n').filter(function( line ){
      return line.length && line[0] != ' ';
    });
    var monitor = cards
      .filter(function( line ){ return ~line.indexOf('Mode:Monitor'); })
      .map( validateCard.mapNames )
    ;
    cards = cards.map( validateCard.mapNames );
    var managed = cards.filter(function( c ){
      return !~monitor.indexOf( c );
    });
    env
      .debug( 'cards =', cards )
      .debug( 'monitor =', monitor )
      .debug( 'managed =', managed )
    ;
    if( !cards.length ){
      env.emerg('no wireless cards detected');
      env.emerg('--- iwconfig stdout ---');
      env.emerg( '%s', stdout );
      env.emerg('--- iwconfig stderr ---');
      env.emerg( '%s', stderr );
      return env.exit( 1 )
    }
    if( !env.$.card ){
      env.set( 'card', cards[0] );
      // TODO interactive selection instead defaulting to first?
      env.notice( 'defaulting wireless card to "%s"', env.$.card );
    }
    if( ~managed.indexOf(env.$.card) ){
      env.info( 'wireless card "%s" is on managed mode', env.$.card );
      env.exec( 'airmon-ng start ' + env.$.card, function( e, out, error ){
        env.emerg('--- airmon stdout ---');
        env.emerg( '%s', o );
        env.emerg('--- airmon stderr ---');
        env.emerg( '%s', e );
        env.next();
      });
      return;
    }
    if( ~monitor.indexOf(env.$.card) ){
      env.info( 'wireless card "%s" is on monitor mode', env.$.card );
      return env.next();
    }
    // TODO interactive selection here too?
    env.emert('wireless card "%s" does not exist', env.$.card )
    return env.exit( 1 );
  });
}
validateCard.mapNames = function( line ){
  return /^([^ ]+)/.exec( line )[ 1 ];
};

function monitorMode( env ){
  env.exec('airmon-ng check '+env.$.card, function( stdin, stdout, stderr ){
    var out = stdout.split('\n\n');
    env.debug( out );
    env.emerg('--- airmon stdout ---');
    env.emerg( '%s', stdout );
    env.emerg('--- airmon stderr ---');
    env.emerg( '%s', stderr );
    env.exit( 1 );
  });
}

