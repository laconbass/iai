#!/bin/bash

# NOTE: `set -e` impedes try-catching commands

##
# SCRIPT DEPENDENCIES
# ===================
# - seems lighter not sourcing until something is need
# - an error may happen when the path can't be sourced 
# - should depend only on bashido?
##
# source $(dirname "$DIR")/bash/helper.bash
type -t bashido >/dev/null || { echo >&2 "FATAL: missing bashido"; exit 1; }
source "$(bashido abc-call_trace)" || exit
source "$(bashido abc-log)" || exit
source "$(bashido assert-basic)" || exit

##
# MAIN COMMAND
# ============
# `iai` acts as an accessor to sub-commands.
# When it's run without arguments, outputs some ascii art.
##
iai () {
  if test $# -eq 0
	then
		cat "$(iai-path db artii 0110)"
    exit 0
	fi

	local cmd="iai-$1"

	case "$(type -t "$cmd")" in
		"")
			fail "there is nothing named '$cmd'"
			;;
		"function")
			;; # no action need
		"file")
			verb "loading command '$cmd'"
			source "$cmd" || fail "Unexpected exit status $? while sourcing '$cmd'"
			;;
		*)
			warn "'$1' is known to be a '$(type -t "$cmd")'"
			fail "I don't know what to do now"
			exit 1
			;;
	esac

	verb <<<"running 'iai $@' as '$cmd' (from $(caller))"
	# Quoting is neccessary, otherwise quoted args are splitted
	shift; $cmd "$@" || exit
}

##
# BUILT-IN COMMANDS
# =================
# The commands built-in are defined as bash funcions hereafter.
# Built-in commands don't have a script file (there is no iai-command script).
# This is because they are essential, or enought simple.
##

##
# `iai help` outputs useful information about iai's command-line usage
##
iai-help () {
  info <<HEREDOC
##
# Here should be some help text
##
> built-in commands:
> id db dir date hora info warn fail
TODO research functions within this file named 'iai-*'
> available scripts (\$1):
HEREDOC
	info <<<$(tree "$(iai-path script)")
}

##
# `iai date` and `iai hora` standarize the date and time formats
##
iai-date () { date --rfc-3339=date || exit 1; }
iai-hora () { date --rfc-3339=seconds || exit 1; }

##
# `iai root` outputs the directory where iai resides (the "iai root").
# It's probably the most basic operation besides the "artistic" bare `iai`,
# and the `iai help` commands.
# LINK
# - http://stackoverflow.com/a/246128/1894803
# : research absolute paths to this script file and its directory
##
iai-root () {
	local SOURCE="${BASH_SOURCE[0]}" DIR=""
	while [ -h "$SOURCE" ]; do
		DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
		SOURCE="$(readlink "$SOURCE")"
		[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
	done
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	dirname $DIR
}

##
# `iai dir` is an alias for `iai root`
# TODO: should `dir` be deprecated favouring `root`? Seems more descriptive
##
iai-dir () { iai-root; }

##
# `iai-path` joins each argument to `iai-root` with slashes between.
##
iai-path () {
  printf "%s" $(iai-root)
  if test $# -gt 0; then
    # Quoting is neccessary to correctly parse arguments
    # Ex: local args=("$@"); for arg in "$@"; do echo >&2 "arg=$arg"; done
    printf "%s" "${@/#//}"
  fi
  printf "\n" # could use echo but wanted to be more explicit
}

##
# `iai test` runs the whole iai test suite
##
iai-test () { cd "$(iai-root)"; ./test/bash/all; }

##
# MAIN ROUTINE
# ============
PATH="$PATH:"$(iai-path abc command)""
iai "$@"
exit

old-iai () {
case "$1" in
  "-h"|"-?"|"--help"|"help") iai-help; exit ;;
  path) 
    shift;
    iai-path "$@"
  ;;
	"test")  iai test; exit ;;
  ##
  # TODO
  # - This should not be a built-in, sure
  id)
    if test -x $2; then
      echo "$(basename "$2" | sed 's/iai-//')"
      exit 0
    fi
    fail "miss exec perms: '$2'"
    exit 1
  ;;
  db)
    DB="$(iai dir)/db/$(iai id "$2")/$(hostname)"
    mkdir -p "$DB"
    echo "$DB"
  ;;
  info|warn|fail)
    $1 "${@:2}"
    exit $?
  ;;
  *)# run "external" command
		# TODO move this inside iai function
    CMD="$DIR/iai-$1"
    [[ ! -f "$CMD" ]] && fail "iai command '$1' does not exist" && exit 1
    # try auto fix when file-is-not-executable
    if [ ! -x "$CMD" ]; then
      warn "It seems likely command exists but has not exec perms:"
      # TODO confirm before automatically making a file executable!!!!!!!! ehmmm why?
      ls -l "$CMD"; echo -n "> Trying automatic 'chmod +x' fix ... "
      chmod +x "$CMD" && info "succeed!" || fail ":( failed ;("
    fi
    $CMD "${@:2}"
  ;;
esac
}
##
# vim modeline
# /* vim: set filetype=sh ts=2 shiftwidth=2: */
