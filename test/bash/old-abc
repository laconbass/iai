
##
# test "abcs" are included at once with this file
if test -z "$@"
then # source all files at once
  source <( find test/bash -name "abc-*" -exec cat {} + )
else # source each file indepently
# TODO
# - iterating over an array of filenames is a "bash-bad-practice", use find
# - research a command to source files indepently without looping over them
  files=("$( find test/bash -name 'abc-*' -exec echo {} \; )")

  test "${#files[@]}" -ne 0
  tested "at least 1 abc test util was found"

  # pass sourced files '$@' to request '--test' when asked for
  for file in ${files[@]}; do
    source "$file" "$@"
    tested "command 'source $file $@' ends with code 0"
  done
  ##
  # Extra tests for better _developer experience_
  # TODO test that utilities ease debugging
  # - 'diff_test' utility wraps lines within vertical bars
  # - 'tested' utility outputs call trace
  # TODO test that utilities ease developing
  # - each source file ends with: "##\n# vim modeline\n# /* vim: set filetype=sh shiftwidth=2: */\n"
fi
test "$1" == "--test" && { cat <<TODOLIST >&2
TODOs at file '${BASH_SOURCE[0]}':
#1 redirecting a heredoc in diff_test directly, or even a herestring
  diff_test <( echo -e "1-\n2-\n3-" ) <<EXPECT
  1-
  2-
  3-
  EXPECT
  tested  "'diff_test' accepts input from a process substitution and a heredoc"
  diff_test <( echo "some text" )\ <<<"some text"
  tested  "'diff_test' accepts input from a process substitution and a herestring"
#2 tool to write todos like this one
  - 'testodo' seems a nice name
  - seems easy to implement but
  WRITE TESTS FIRST with diff_test
  - stop fucking cowboy coding
#3 tool to signal "workinghere"
  - use caller to get filename
TODOLIST
} || true
##
# vim modeline
# /* vim: set filetype=sh shiftwidth=2: */

