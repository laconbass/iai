#!/bin/bash

# Can't use `-e`, or it's not possible to "catch" errors after they fire up
set +e

# TODO iterating over an array of filenames is a "bash-bad-practice"
#      (it is done over an over here)

##
# tested tool is the first thing to check for
source "bash/tested.bash" && tested--test || {
  echo "CANT START TESTS"
  exit 1
}

##
# bash lib tests are the next thing to check. iai needs that lib to work
# TODO WTF are abc.bash tests? stop cowboy coding PLEASE!
# TODO WTF are abc-call_trace.bash tests? stop cowboy coding PLEASE!
# TODO Seems ideal to list bash/*.bash and check every lib file has a test file
#test $(find test/bash -name "bashlib-*" | wc -l) -gt 0
#tested "there are at least 1 bash test"
#find test/bash -name "bashlib-*" -exec './{}' \;
bashlibtests=("$(ls test/bash/bashlib-*)") || oops "list bashlib tests!"
test "${#bashlibtests[@]}" -eq "0" && oops "found no bashlib tests!"
for file in ${bashlibtests[@]}; do
  # run test scripts within a subshell to avoid polluting env
  ("./$file") >/dev/null; tested "bashlib test '$file'"
done

cat <<TODOLIST >&2
TODOs at file '${BASH_SOURCE[0]}':
#1 redirecting a heredoc in diff_test directly, or even a herestring
  diff_test <( echo -e "1-\n2-\n3-" ) <<EXPECT
  1-
  2-
  3-
  EXPECT
  tested  "'diff_test' accepts input from a process substitution and a heredoc"
  diff_test <( echo "some text" )\ <<<"some text"
  tested  "'diff_test' accepts input from a process substitution and a herestring"
#2 tool to write todos like this one
  - 'testodo' seems a nice name
  - seems easy to implement but
  WRITE TESTS FIRST with diff_test
  - stop fucking cowboy coding
#3 tool to signal "workinghere"
  - use caller to get filename
  ##
  # Extra tests for better _developer experience_
  # TODO test that utilities ease debugging
  # - 'diff_test' utility wraps lines within vertical bars
  # - 'tested' utility outputs call trace
  # TODO test that utilities ease developing
  # - each source file ends with vim modeline
TODOLIST

fail -e "#################\n KEEP WORKING ON \n#################" || exit 1

##
# next procede with iai command line tools tests
iaicmdtests=("$(ls test/bash/iaicmd-*)") || cant "list iaicmd tests!"
test "${#iaicmdtests[@]}" -eq "0" && cant "find any iaicmd tests!"
for file in ${iaicmdtests[@]}; do
  "./$file"; tested "iaicmd test '$file'"
done

echo "######################"
echo "! All tests were run !"
echo "######################"
echo "              good job :D"
##
# vim modeline
# /* vim: set filetype=sh ts=2 shiftwidth=2: */
