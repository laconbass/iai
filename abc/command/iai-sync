assert_function iai || exit

function iai-sync () {
  test $# -eq 0 && {
		info "Sincronizando todos os repositorios..."
		iai find-repos --npm \
		| while read repo
	    do iai-sync-repo "$repo" || return
			done
		info "Sincronizados todos os repositorios."
		return 0
	}
  
  case "$1" in
		repo)
			shift;
			iai-sync-repo "$@"
			;;
	  status)
			shift
			iai-sync-status "$@"
			;;
		*)
			test -d "$1" || fail "unexpected content for \$1: %s" "$1"

			info "Sincronizando os repositorios en %s" "$1"
			iai find-repos "$1" \
			| while read repo
				do iai-sync-repo "$repo" || return
				done
			info "Feito"
			;;
  esac
}

# TODO use https://stedolan.github.io/jq
function json-value () {
  local data="${1:?'missing data ($1)'}"
  node -e "console.log(${data}${2})" || fail
}

# git log --oneline --graph --decorate --date-order

function iai-sync-status () {
	local repo="${1:-$(iai repo)}"
	test -z "$repo" && emsg "can't sync because can't find git repo" && return 1

	(
	  set -Eeou pipefail
	  cd "$repo"
		info "mostrando estado de %s" "$PWD"
		git remote -v \
		| jq --raw-input \
		'
			split("\t") | {
				(.[0]): (.[1] | split(" ") | {
					(.[1] | gsub("[)(]"; "")): .[0]
				})
			}
		' \
		| jq --slurp \
		  --argjson info "$(iai --quiet git-status)" \
			--arg path "$PWD" \
			'
				reduce .[] as $item ({}; . * $item) | . * { path: $path, info: $info }
			' \
		;
		#| jq --compact-output \
  )

	return 0
	fail "Working on this shit"
 
  cd "$repo" || fail

  local data="$(iai git-status)"
  if test $(json-value "$data".action) == 'fetch'
  then
    info "fetching %s..." "$repo"
    git fetch
    data="$(iai git-status)"
  fi
  case "$(json-value "$data".action)" in
    fetch)
      info "current branch (%s) is up-to-date" "$(json-value "$data".branch)"
      ;;
    push)
      info "pushing %s..." "$repo"
      git push || exit
      ;;
    pull)
      info "pulling %s..." "$repo"
      git pull --ff-only || exit
      iai git-status
      iai working
      ;;
    *)
      emsg "can't determine what to do"
      json-value "$data"
      return 1
      ;;
  esac

  if $(json-value "$data".files.staged)
  then
    warn "> there are staged files in the repo"
    utip "try %s" "git commit -m 'commit summary'"
    exit 1
  fi
  if $(json-value "$data".files.changed)
  then
    warn "> there are changed files in the repo"
  fi
  if $(json-value "$data".files.untracked)
  then
    warn "> there are untracked files in the repo"
  fi

  warn "skiping remote sync @shitbook"
  exit 1
  if test "$(hostname)" != "shitbook"
  then
    utip "> # remote pull @shitbook through ssh"
    ssh shitbook "cd $repo && git pull" || fail "can't pull on shitbook"
  fi
  utip "> git status # (local) after sync!"
  git status
}

function iai-sync-repo () {
	(
	 cd "$1"
	 git fetch
   iai-sync-status "$1"
	 git pull
	)
	return 0
}

##
# vim modeline
# /* vim: set filetype=sh ts=2 shiftwidth=2: */
